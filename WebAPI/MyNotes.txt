EF Core
*NET geliştiricilerinin .NET nesneleri(class,interface vb.) kullanarak bir veri tabanı ile çalışmasına olanak tanır.
*Genellikle yazılması gereken veri erişim kodunun çoğuna olan ihtiyacı ortadan kaldırır.
*Entity Framework Microsoft tarafından geliştirilmiş ORM(Object Relational Mapping) çatılarındandır.
Inversion of Control
*Framework'ler request ve response'ları yönetmemizi, kontrol etmemizi sağlıyor. Kontrolü bana devret.
Add-Migration isim_ver
Update-Database
*Type Configuration neden ihtiyaç var=bazı alanlara default değerler vermek için bazı alanları kısıtlamak için kullanırız.
Remove-Migration
*Inversion of Control
----------------
*Soyutlama yaparken uygulamanın detayları ile ilgilenmeyiz. Önemli olan kural tanımlamaktır. Hangi metotların olacağını söylemektir.
--------------
***Eager Loading=Bazen bir nesneye ihtiyacımız olduğunda o nesneyi ve o nesne ile alakalı her şeyi bir defada yüklemek isteriz.
***Lazy Loading=Uygulama için bir reference vs. olabilir bir yer tutulur bir şekilde fakat ne zaman ihtiyaç olur o zaman referans kullanılır, nesne üretilir gereksiz kaynak kullanımından kaçınılmış olur.
-------
Extensions=Servise, MVC nin builder ifadelerine, yeri geldiğinde application'a uzantı metotlar(extension) yazılabilir.
------------
Install-Package Microsoft.AspNetCore.MVC.Core -ProjectName Presentation=Microsoft.AspNetCore.MVC.Core paketi ile bir class'a Controller olma özelliği kazandırabiliyor.
---------
Drop-Database komutu ile db silinir.
-----------
EntitiesLayer-RepositoriesLayer-IRepositoryBase-RepositoryBase-BookRepository-RepositoryManager-LazyLoading-ServiceExtensions-ServicesLayer-BookService-ServiceManager-IoC(ServiceManager)-PresentationLayer-RepositoryContextFactory
-----------
NLog.Extensions.Logging-LoggerService-LoggerManager-nlog.config-ServisKaydı-BookService tasarımının değiştirilmesi-ServiceManager tasarımı değiştirilmesi
-------
Dependency Inversion Principle=üst class'lar alt class'lara bağımlı olmamalıdır. Eğer class'lar arasında bağlantı kurulacaksa bu bağlantıyı interface'ler aracılığı ile geliştirmeliyiz.
-----------
developer power shell üzerinde dotnet --help
dotnet add package paket_ismi
-----------------
nlog-project.org/config
------------
nlog.development.json=Development modu organize ettiğimiz
nlog.production.json=Production modu organize ettiğimiz
nlog.staging.json=Staging modu organize ettiğimiz
**Birden fazla dosya ile bu configürasyon ifadesini ilişkilendirebiliriz.
-----------
catch düşen her şey loglanır.
---------
ErrorModel-ErrorDetails(Serialize)-ConfigureExceptionHandler-UseExceptionHandler-BloklardanArındırma(try,catch,finally)-NotFoundException(abstract)-BookNotFoundException(Sealed)-ImproveConfigureExceptionHandler
Client-->request gönderir-->Cache,Authentication,CORS<-->DbContext[HttpModules] -->HttpHandlers-->Response-->Client
-----------
