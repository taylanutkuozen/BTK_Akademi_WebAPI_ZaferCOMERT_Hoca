EF Core
*NET geliştiricilerinin .NET nesneleri(class,interface vb.) kullanarak bir veri tabanı ile çalışmasına olanak tanır.
*Genellikle yazılması gereken veri erişim kodunun çoğuna olan ihtiyacı ortadan kaldırır.
*Entity Framework Microsoft tarafından geliştirilmiş ORM(Object Relational Mapping) çatılarındandır.
Inversion of Control
*Framework'ler request ve response'ları yönetmemizi, kontrol etmemizi sağlıyor. Kontrolü bana devret.
Add-Migration isim_ver
Update-Database
*Type Configuration neden ihtiyaç var=bazı alanlara default değerler vermek için bazı alanları kısıtlamak için kullanırız.
Remove-Migration
*Inversion of Control
----------------
*Soyutlama yaparken uygulamanın detayları ile ilgilenmeyiz. Önemli olan kural tanımlamaktır. Hangi metotların olacağını söylemektir.
--------------
***Eager Loading=Bazen bir nesneye ihtiyacımız olduğunda o nesneyi ve o nesne ile alakalı her şeyi bir defada yüklemek isteriz.
***Lazy Loading=Uygulama için bir reference vs. olabilir bir yer tutulur bir şekilde fakat ne zaman ihtiyaç olur o zaman referans kullanılır, nesne üretilir gereksiz kaynak kullanımından kaçınılmış olur.
-------
Extensions=Servise, MVC nin builder ifadelerine, yeri geldiğinde application'a uzantı metotlar(extension) yazılabilir.
------------
Install-Package Microsoft.AspNetCore.MVC.Core -ProjectName Presentation=Microsoft.AspNetCore.MVC.Core paketi ile bir class'a Controller olma özelliği kazandırabiliyor.
---------
Drop-Database komutu ile db silinir.
-----------
EntitiesLayer-RepositoriesLayer-IRepositoryBase-RepositoryBase-BookRepository-RepositoryManager-LazyLoading-ServiceExtensions-ServicesLayer-BookService-ServiceManager-IoC(ServiceManager)-PresentationLayer-RepositoryContextFactory
-----------
NLog.Extensions.Logging-LoggerService-LoggerManager-nlog.config-ServisKaydı-BookService tasarımının değiştirilmesi-ServiceManager tasarımı değiştirilmesi
-------
Dependency Inversion Principle=üst class'lar alt class'lara bağımlı olmamalıdır. Eğer class'lar arasında bağlantı kurulacaksa bu bağlantıyı interface'ler aracılığı ile geliştirmeliyiz.
-----------
developer power shell üzerinde dotnet --help
dotnet add package paket_ismi
-----------------
nlog-project.org/config
------------
nlog.development.json=Development modu organize ettiğimiz
nlog.production.json=Production modu organize ettiğimiz
nlog.staging.json=Staging modu organize ettiğimiz
**Birden fazla dosya ile bu configürasyon ifadesini ilişkilendirebiliriz.
-----------
catch düşen her şey loglanır.
---------
ErrorModel-ErrorDetails(Serialize)-ConfigureExceptionHandler-UseExceptionHandler-BloklardanArındırma(try,catch,finally)-NotFoundException(abstract)-BookNotFoundException(Sealed)-ImproveConfigureExceptionHandler
Client-->request gönderir-->Cache,Authentication,CORS<-->DbContext[HttpModules] -->HttpHandlers-->Response-->Client
-----------
Automapper
Source(BookDto-->Id,Title,Price) --> Destination(Book-->Id,Title,Price)
Dto'daki kaynağı destination'daki kaynağa kopyalamış oluyoruz.
Automapper-RecordType-Paket Kurulumu-MappingProfile-ServisKaydı-ManagerDüzenlenmesi-SunumKatmanınınDüzenlenmesi
--------
sharplab.io-->
---------
Accept Header-Respect Browser Accepter Header-AddXmlDataContractSerializerFormatters-Serializable-Restrict Media Type-ReturnHttpNotAcceptable-CustomFormatters-IMvcBuilder Extension Method
İçerik Pazarlığı(Content Negotiation)=Doğrudan api'yi tüketen client'lar olabilir. 
Client 1 (Accept:text/csv) diyelim ki csv ile üretmiyoruz ve APImiz pazarlığa açıksa bu nesneyi desteklemiyorsak 406 NotAcceptable
Client 2 (Accept:application/xml)
Client n (Accept:application/json)
**Postman'dan request yaptığımızda Header'da Accept parametresinde */* bu ifade var ise=API pazarlığa kapalı demektir.
-----------------------------------
[ApiController]=Controller'a bazı davranışsal özellikler kazandırmış oluyoruz-Configure<ApiBehaviorOptions>("SuppressModelStateInvalidFilter=bunu kullandık"
,SuppressInferBindingSourcesForParameters,SuppressConsumeConstraintForFormFileParameters,SuppressMapClientErrors)
-ModelState-422 Unprocessable Entity-Rerun Validation-Built in Attributes-Custom Attributes-IValidationObject
[ApiController]=Attribute routing, HTTP 400, Binding source parameter inference, Multi/part-data request inference, Problem details for error status code
ControllerBase sağladığı bazı özellikler : BadRequest(400), NotFound(404), PhysicalFile(Bir dosya döner), TryUpdateModelAsync(Model Binding çağırır), TryValidateModel (Model Doğrulama çağırır)
Microsoft.AspNetCore.Mvc namespace bazı Attribute ifadeleri sağlar : [Route]=Bir controller veya bir action için URL desen belirlemek, [Bind]=Model Binding içermek için ön ek ve özelliklleri belirlemek [HttpGet]=Http Get action fiilini destekler [Consumes]=Action'ları kabul etmek için data type'ları belirler, [Produces]=Action'ların return'lerinin data type'larını belirler.
[ProducesResponseType(StatusCodes.Status201Created)]=Action üzerinde sonuç olarak dönecek statü kodunu Attribute olarak verir.
[FromBody]=Request Body, [FromForm]=Request Body sindeki form verisi, [FromHeader]=Request Header, [FromQuery]=Request query string parameter, [FromRoute]=Route data from the current request [FromServices]=Action parametreleri olarak request servisi koda yerleştirmek
Validation'lar=[ValidateNever], [EmailAddress], [Phone], [Range], [RegularExpression], [Required], [StringLength]
-------------------------
Asenkron programlama-async,await ve Task Keywords-return types-async code uygulaması-controller düzenlemesi
Asynchronous Programming Model(APM);Event-based Asynchronous Pattern(EAP);Task-based Asynchronous Pattern(TAP) {uygulamada odaklanılan}
senkron ise thread içerisinde olur ve o thread numarası olur. Örnek Thread:29555 gibi
bir istek geldi thread pool karşıladı thread oluşturdu sunucuya gidildi, sonra bir istek daha geldi aynı şekilde thread pool aldı thread oluşturdu sunucuya gidildi. diyelim thread pool doldu sonrasında gelen istekler(requestler) bekleyecektir.
asenkronda ise thread pool aldı async request'i bir thread oluşturdu eş zamanda bir async request daha geldi thread pool bir öncekinin bitmesini beklemeden bir thread daha oluşturabilecektir. işlemler ayrı ayrı thread'ler üzerinde dönebilir. sistem kullanım zamanı ve kaynak kullanımı değişmez sadece asenkron'da bloklama süresi değişir.
Single Thread= 3 tane görev var ise önce Task1 bitecek sonra Task2 ve en son Task3 bitecektir. (Her görev tek thread içerisinde sırasıyla çalıştırılır)
MultiThread=Task1 bir tane thread içerisinde gerçekleşirken task2 ve task3 farklı threadler içerisinde gerçekleşebilir.(Her görev ayrı bir thread içerisinde çalışır, Görevlerin tamamlanması süreci birbirinden bağımsızdır. Zaman konusunda avantajlıyız.)
Single Thread Async=Bir thread içerisindeki bir görev devam ederken diğer görevlerde çalışmaya devam eder ve görevler birbirlerini bloklar.(Bekleme süreleri-blocking. Temel düşünce blocking olduğu durumlarda başka bir görevin işlemleri yapılarak zamanın verimli kullanılmasına dayanır.)
Task=.NET dünyasında asenkron programlama için thread pool kullanılıyor. 
	Threadler thread pooldan çekilir. 
	Çalıştırılan thread yapılarının yönetimi sağlanır. 
	Bu noktada Task kullanılır. 
	Task objesi temel olarak üstlendiği işleri thread pool üzerinden asenkron olarak çalıştırır. Task anahtar kelimesinin asenkron metot tanımlarken kullanılması gerektiğini ancak sonucu temsil etmediğini anlamak önemlidir.
	Task içerisinde çok Status, IsCompleted, IsCanceled, IsFaulted gibi çok sayıda property barındırır.
	Task ile biz operasyonun tamamlanıp tamamlanmadığını izleyebiliriz.
await=Sonuçların asenkron operasyondan çıkartılmasını sağlar.
		Operasyonun başarısını doğrular.
		Zaman uyumsuz yöntemde kodun geri kalanını yürütmek için devamı sağlar.
		await anahtar kelimesinin kullanılması zorunlu değildir.
		await anahtar kelimesi yalnızca bir kez kullanılmak zorunda da değildir.(asenkron çalışma içerisinde birden fazla kez kullanılabilir.)
metot adının sonuna Async getireceğiz. metot return type Task<T> olacak. ve metot return type öncesinde async anahtar kelimesini kullanacağız. ve son olarak kod içerisinde await kullanacağız(örnek olarak return yerine)
--------------
Action Filter Implementation-Scope of Action Filters-Order of Invocation-Validation with Action Filters-Logging with Action Filters-Refactoring Presentation and Service Layers
ActionFilter=Action Filter bir Controller ya da Controller içindeki Action yapısına uygulanan ve bu yolla ilgili yapının düzenlenmesine olanak sağlayan bir attribute olarak ifade edilebilir.
	İlgili action çalışmadan önce veya çalıştıktan sonra bazı kodları modifiye etmemizi veya düzenlememizi sağlar.
	Autherization filter-Resource filters-Action filters-Exception filters-Result filters
 IActionFilter-IAsyncActionFilter-ActionFilterAttribute
 Global(Register in AddControllers);Controller Level-Action Level(Register-IoC Service Type)
-------
Scope
OnActionExecuting from the Global filter
	OnActionExecuting from the Controller filter
		OnActionExecuting from the Action filter
			Action method execution
		OnActionExecuting from the Action filter
	OnActionExecuting from the Controller filter
OnActionExecuting from the Global filter
------
Debug-->Windows-->Immediate
-------
Pagination,Paging implementation,Concrete query,Improving pagination,X-Pagination Header, Cors Yapılandırması
*Paging API'dan sonuçların kısmi olarak alınmasıdır.
*RESTful API tasarımı için önemli bir özelliktir.
/books?pageNumber=2&pageSize=5
-CurrentPage,TotalPage,PageSize,TotalCount,HasPrevious(CurrentPage>1),HasNext(CurrentPage<TotalPage)
**MetaData=Sorgu ile ilgili bilgi vermek (HasPrevious,HasNext)
**X-Pagination Header ifadesinin tüketilebilmesi, clientlar tarafından okunması için CorsConfigürasyon yapmak gereklidir.
--------
Filtering, Filtering Different from Searching, Filtering Implementation, Sending and Testing a Query
Filtering=Bir takım kriterlere bağlı olarak sonuçların getirilmesini sağlayan bir mekanizmadır.
/books?minPrice=20 örneği gibi query string ile çalışabiliriz.
/books?maxPrice=300
/books?minPrice=20&maxPrice=300
------
Searching, Searching Implementation, SearchTerm, Case Sensitivity, Repository Extensions
Searching=Bir terim ya da anahtar değer yardımıyla uygulama içerisindeki en alakalı sonuçları döndürmek üzere uygulanan bir işlevdir.
  -Tek bir kolon, birden fazla kolon, bir kaynak, birden fazla kaynak yapılabilir.
/books?searchTerm=kara
/books?searchTerm=Kara
/books?searchTerm=KARA
/books?searchTerm=kARa
*Lucene.net--> library
-----------------
Sorting, Sorting Implementation, Query Strings, System.Linq.Dynamic.Core, Order Query Builder, Repository Extensions
Sorting= Query String parametreleri yardımıyla tercih edilen bir yolla sonuçların sıralanması işlevidir.
/books?orderBy=title
/books?orderBy=title desc
/books?orderBy=price
/books?orderBy=price desc
---------
Data Shaping, Dynamic Typing, Reflection, PropertyInfo, Data Shaper Implementation, Service Register
Data Shaping= API tüketicisinin, sorgu dizesi aracılığıyla talep ettiği nesnenin alanlarını seçerek sonuç setini şekillendirmesini sağlar.
/books?fields=id
/books?fields=id, title
/books?fields=id, title, price
---------
HATEOAS(Hypermedia as the Engine of Application State)=Hyper media özelliğini API'ye kazandırmak.
HATEOAS,Link,LinkResourceBase,LinkCollectionWrap,Entity,ShapedEntity,DataShaper,LinkParameters,LinkResponse,AddCustomMediaTypes,ServiceUpdate,API Testing.
---------
Options Http Requests=Erişilebilir olan seçenekler, Head Http Requests=Body olmadan meta bilgileri almak için kullanılır.
Head=Get ile aynı şekilde çalışıyor ancak aradaki fark response'taki body kısmı yok. Gövde olmadan doğrudan meta ifadeleri ile server iletişim kurulabilmektedir.